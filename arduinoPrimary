

#include <EEPROM.h> //library that access' the EEPROM storage, where painbit stores callibrated and recorded pain levels

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_AM2320.h>

#include <TimeLib.h> //Module used to keep track of date and time

#define TIME_HEADER  "T"   // Header tag for serial time sync message
#define TIME_REQUEST  7    // ASCII bell character requests a time sync message 

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library. 
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


int fsrPin = 0;     // the FSR and 10K pulldown are connected to a0
int fsrReading;     // the analog reading from the FSR resistor divider
 

#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16
static const unsigned char PROGMEM logo_bmp[] =
{ 0b00000000, 0b11000000,
  0b00000001, 0b11000000,
  0b00000001, 0b11000000,
  0b00000011, 0b11100000,
  0b11110011, 0b11100000,
  0b11111110, 0b11111000,
  0b01111110, 0b11111111,
  0b00110011, 0b10011111,
  0b00011111, 0b11111100,
  0b00001101, 0b01110000,
  0b00011011, 0b10100000,
  0b00111111, 0b11100000,
  0b00111111, 0b11110000,
  0b01111100, 0b11110000,
  0b01110000, 0b01110000,
  0b00000000, 0b00110000 };


void setup() {
  Serial.begin(9600);
/*
  //Setting up the time and date
  while (!Serial) ; 
  pinMode(13, OUTPUT);
  setSyncProvider( requestSync);  //set function to call when sync required
  Serial.println("Waiting for sync message");
*/
  
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever

      // We'll send debugging information via the Serial monitor
  Serial.begin(9600);  
  display.display();
  delay(2000);
  //clear buffer
  display.clearDisplay(); 
    
  }

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();

  // Draw a single pixel in white
  display.drawPixel(10, 10, SSD1306_WHITE);

  // Show the display buffer on the screen. You MUST call display() after
  // drawing commands to make them visible on screen!
  display.display();
  delay(2000);
  // display.display() is NOT necessary after every single drawing command,
  // unless that's what you want...rather, you can batch up a bunch of
  // drawing operations and then update the screen all at once by calling
  // display.display(). These examples demonstrate both approaches...

  testpainbit();    // Execute Pain Level Registering

}



void loop() {

/*
//loop used for tracking time
  if (Serial.available()) {
    processSyncMessage();
  }
  if (timeStatus()!= timeNotSet) {
    digitalClockDisplay();  
  }
  if (timeStatus() == timeSet) {
    digitalWrite(13, HIGH); // LED on if synced
  } else {
    digitalWrite(13, LOW);  // LED off if needs refresh
  }
  delay(1000);
*/

}



//time tracking functions 
//From: Time  Serial Arduino example code

/*

void digitalClockDisplay(){
  // digital clock display of the time
  Serial.print(hour());
  printDigits(minute());
  printDigits(second());
  Serial.print(" ");
  Serial.print(day());
  Serial.print(" ");
  Serial.print(month());
  Serial.print(" ");
  Serial.print(year()); 
  Serial.println(); 
}

void printDigits(int digits){
  // utility function for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
  if(digits < 10)
    Serial.print('0');
  Serial.print(digits);
}


void processSyncMessage() {
  unsigned long pctime;
  const unsigned long DEFAULT_TIME = 1357041600; // Jan 1 2013 default time

  if(Serial.find(TIME_HEADER)) {
     pctime = Serial.parseInt();
     if( pctime >= DEFAULT_TIME) { // check the integer is a valid time (greater than Jan 1 2013)
       setTime(pctime); // Sync Arduino clock to the time received on the serial port
     }
  }
}

time_t requestSync()
{
  Serial.write(TIME_REQUEST);  
  return 0; // the time will be sent later in response to serial mesg
}
*/


//Record Pain levels to eeprom

void writeStringToEEPROM(int addrOffset, const String &strToWrite)
{
  byte len = strToWrite.length();
  EEPROM.write(addrOffset, len);
  for (int i = 0; i < len; i++)
  {
    EEPROM.write(addrOffset + 1 + i, strToWrite[i]);
  }
}

String readStringFromEEPROM(int addrOffset)
{
  int newStrLen = EEPROM.read(addrOffset);
  char data[newStrLen + 1];
  for (int i = 0; i < newStrLen; i++)
  {
    data[i] = EEPROM.read(addrOffset + 1 + i);
  }
  data[newStrLen] = '\0'; // !!! NOTE !!! Remove the space between the slash "/" and "0" (I've added a space because otherwise there is a display bug)
  return String(data);


  
}


//PainBit Functions



void testpainbit(void) {
  display.clearDisplay();

  display.setTextSize(1.7);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(20,10);             // Start at centre
  display.println(F("Hello, new user!"));


  display.display();
  delay(2000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen


   
 //Start up

  delay(2000);
  display.setCursor(20,10);             // Start at centre
  display.println("\n Welcome To PainBit!" ); 
  display.display(); //Welcome text displayed on LCD
  delay(2000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  display.setTextSize(1.6);             // Normal 1:1 pixel scale
  display.setCursor(0,0);             // Start at top left corner
  display.println("Let's begin" ); 
  display.println("registering" ); 
  display.println("your pain levels" ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen



//Begin Callibration

  //Callibration for level 1 pain

  display.setTextSize(1.6);             // Normal 1:1 pixel scale
  display.setCursor(0,0);             // Start at top left corner
  display.println("Please press" ); 
  display.println("to register" ); 
  display.println("level 1 pain..." ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  
  fsrReading = analogRead(fsrPin);  
  EEPROM.put(0, fsrReading); //write fsrReading value at byte 1
  int level_one_pain;
  EEPROM.get(0,level_one_pain);   //retrieve the pain value stored to verify it got stored 
  display.setCursor(0,0);   //prepare where to write on display 
  display.println("Level one pain" ); 
  display.println("registered as: " ); 
  display.println(level_one_pain);
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  
  delay(2000);

  //Callibration for level 2 pain

  
  display.setTextSize(1.6);             // Normal 1:1 pixel scale
  display.setCursor(0,0);             // Start at top left corner
  display.println("Please press" ); 
  display.println("to register" ); 
  display.println("level 2 pain..." ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  
  int fsrReading2 = analogRead(fsrPin);    
  EEPROM.put(20, fsrReading2); //write fsrReading value at byte 1
  int level_two_pain;
  EEPROM.get(20,level_two_pain);   //retrieve the pain value stored to verify it got stored 
  display.setCursor(0,0);   
  display.println("Level two pain" ); 
  display.println("registered as: " ); 
  display.println(level_two_pain);
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  //Callibration for level 3 pain


  display.setTextSize(1.6);             // Normal 1:1 pixel scale
  display.setCursor(0,0);             // Start at top left corner
  display.println("Please press" ); 
  display.println("to register" ); 
  display.println("level 3 pain..." ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  
  int fsrReading3 = analogRead(fsrPin);    
  EEPROM.put(40, fsrReading3); //write fsrReading value at byte 1
  int level_three_pain;
  EEPROM.get(40,level_three_pain);    //retrieve the pain value stored to verify it got stored 
  display.setCursor(0,0);   
  display.println("Level three pain" ); 
  display.println("registered as: " ); 
  display.println(level_three_pain);
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen



 //Callibration for level 4 pain


  display.setTextSize(1.6);             // Normal 1:1 pixel scale
  display.setCursor(0,0);             // Start at top left corner
  display.println("Please press" ); 
  display.println("to register" ); 
  display.println("level 4 pain..." ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  
  int fsrReading4 = analogRead(fsrPin);    
  EEPROM.put(60, fsrReading4); //write fsrReading value at byte 1
  int level_four_pain;
  EEPROM.get(60,level_four_pain);     //retrieve the pain value stored to verify it got stored 
  display.setCursor(0,0);   
  display.println("Level four pain" ); 
  display.println("registered as: " ); 
  display.println(level_four_pain);
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

 //Callibration for level 5 pain


  display.setTextSize(1.6);             // Normal 1:1 pixel scale
  display.setCursor(0,0);             // Start at top left corner
  display.println("Please press" ); 
  display.println("to register" ); 
  display.println("level 5 pain..." ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  
  int fsrReading5 = analogRead(fsrPin); //read force at sensor   
  EEPROM.put(70, fsrReading5); //write fsrReading value at byte 1
  int level_five_pain;
  EEPROM.get(70,level_five_pain);     //retrieve the pain value stored to verify it got stored 
  display.setCursor(0,0);   
  display.println("Level five pain" ); 
  display.println("registered as: " ); 
  display.println(level_five_pain);
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen



//Callibration for level 6 pain


  display.setTextSize(1.6);             // Normal 1:1 pixel scale
  display.setCursor(0,0);             // Start at top left corner
  display.println("Please press" ); 
  display.println("to register" ); 
  display.println("level 6 pain..." ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  
  int fsrReading6 = analogRead(fsrPin); //read force at sensor   
  EEPROM.put(80, fsrReading6); //write fsrReading value at byte 1
  int level_six_pain;
  EEPROM.get(80,level_six_pain);     //retrieve the pain value stored to verify it got stored 
  display.setCursor(0,0);   
  display.println("Level six pain" ); 
  display.println("registered as: " ); 
  display.println(level_six_pain);
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen


//Callibration for level 7 pain


  display.setTextSize(1.6);             // Normal 1:1 pixel scale
  display.setCursor(0,0);             // Start at top left corner
  display.println("Please press" ); 
  display.println("to register" ); 
  display.println("level 7 pain..." ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  
  int fsrReading7 = analogRead(fsrPin); //read force at sensor   
  EEPROM.put(90, fsrReading7); //write fsrReading value at byte 1
  int level_seven_pain;
  EEPROM.get(90,level_seven_pain);     //retrieve the pain value stored to verify it got stored 
  display.setCursor(0,0);   
  display.println("Level seven pain" ); 
  display.println("registered as: " ); 
  display.println(level_seven_pain);
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen


//Callibration for level 8 pain


  display.setTextSize(1.6);             // Normal 1:1 pixel scale
  display.setCursor(0,0);             // Start at top left corner
  display.println("Please press" ); 
  display.println("to register" ); 
  display.println("level 8 pain..." ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  
  int fsrReading8 = analogRead(fsrPin); //read force at sensor   
  EEPROM.put(100, fsrReading8); //write fsrReading value at byte 1
  int level_eight_pain;
  EEPROM.get(100,level_eight_pain);     //retrieve the pain value stored to verify it got stored 
  display.setCursor(0,0);   
  display.println("Level eight pain" ); 
  display.println("registered as: " ); 
  display.println(level_eight_pain);
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen


//Callibration for level 9 pain


  display.setTextSize(1.6);             // Normal 1:1 pixel scale
  display.setCursor(0,0);             // Start at top left corner
  display.println("Please press" ); 
  display.println("to register" ); 
  display.println("level 9 pain..." ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  
  int fsrReading9 = analogRead(fsrPin); //read force at sensor   
  EEPROM.put(110, fsrReading9); //write fsrReading value at byte 1
  int level_nine_pain;
  EEPROM.get(110,level_nine_pain);     //retrieve the pain value stored to verify it got stored 
  display.setCursor(0,0);   
  display.println("Level nine pain" ); 
  display.println("registered as: " ); 
  display.println(level_nine_pain);
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen


//Callibration for level 10 pain


  display.setTextSize(1.6);             // Normal 1:1 pixel scale
  display.setCursor(0,0);             // Start at top left corner
  display.println("Please press" ); 
  display.println("to register" ); 
  display.println("level 10 pain..." ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  
  int fsrReading10 = analogRead(fsrPin); //read force at sensor   
  EEPROM.put(120, fsrReading10); //write fsrReading value at byte 1
  int level_ten_pain;
  EEPROM.get(120,level_ten_pain);     //retrieve the pain value stored to verify it got stored 
  display.setCursor(0,0);   
  display.println("Level ten pain" ); 
  display.println("registered as: " ); 
  display.println(level_ten_pain);
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen

  display.setCursor(0,0);   
  display.println("Callibration Complete" ); 
  display.println("Thank you!" ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen



  display.setCursor(0,0);   
  display.println("PainBit Ready!" ); 
  display.display(); //Registeration text displayed on LCD
  delay(4000);
  display.clearDisplay(); //clear buffer
  display.display(); //display cleared screen


  
  //Begin monitoring users pain


  while(fsrReading10 > 0) {

   int current_eeprom_addr = 130; //move above while loop?
   int current_pain = analogRead(fsrPin);
   if (current_pain < level_one_pain) {
    display.setCursor(0,0);   
    display.println("No pain \n" ); 
    writeStringToEEPROM(current_eeprom_addr, "No pain");
    readStringFromEEPROM(current_eeprom_addr);
    Serial.println(readStringFromEEPROM(current_eeprom_addr));
    display.display(); //Registeration text displayed on LCD
    delay(4000);
    display.clearDisplay(); //clear buffer
    display.display(); //display cleared screen
    current_eeprom_addr = current_eeprom_addr + 50;
    
  } else if (current_pain < level_two_pain ) {
    display.setCursor(0,0);   
    display.println("Level 1 Pain Identified \n" ); 
    writeStringToEEPROM(current_eeprom_addr, "Level 1");
    readStringFromEEPROM(current_eeprom_addr);
    Serial.println(readStringFromEEPROM(current_eeprom_addr));
    display.display(); //Registeration text displayed on LCD
    delay(4000);
    display.clearDisplay(); //clear buffer
    display.display(); //display cleared screen
    current_eeprom_addr = current_eeprom_addr + 50;
    
  } else if (current_pain < level_three_pain ) {
    display.setCursor(0,0);   
    display.println("Level 2 Pain Identified \n" ); 
    display.display(); //Registeration text displayed on LCD
    delay(4000);
    display.clearDisplay(); //clear buffer
    display.display(); //display cleared screen
    
  } else if (current_pain < level_four_pain ) {
    display.setCursor(0,0);   
    display.println("Level 3 Pain Identified \n" ); 
    display.display(); //Registeration text displayed on LCD
    delay(4000);
    display.clearDisplay(); //clear buffer
    display.display(); //display cleared screen
    
  } else if (current_pain < level_five_pain ) {
    display.setCursor(0,0);   
    display.println("Level 4 Pain Identified \n" ); 
    display.display(); //Registeration text displayed on LCD
    delay(4000);
    display.clearDisplay(); //clear buffer
    display.display(); //display cleared screen


    
  } else if (current_pain < level_six_pain ) {
    display.setCursor(0,0);   
    display.println("Level 5 Pain Identified \n" ); 
    display.display(); //Registeration text displayed on LCD
    delay(4000);
    display.clearDisplay(); //clear buffer
    display.display(); //display cleared screen
    
    

    
  } else if (current_pain < level_seven_pain ) {
    display.setCursor(0,0);   
    display.println("Level 6 Pain Identified \n" ); 
    display.display(); //Registeration text displayed on LCD
    delay(4000);
    display.clearDisplay(); //clear buffer
    display.display(); //display cleared screen
    
    

    
  } else if (current_pain < level_eight_pain ) {
    display.setCursor(0,0);   
    display.println("Level 7 Pain Identified \n" ); 
    display.display(); //Registeration text displayed on LCD
    delay(4000);
    display.clearDisplay(); //clear buffer
    display.display(); //display cleared screen
    
    
    
  } else if (current_pain < level_nine_pain ) {
    display.setCursor(0,0);   
    display.println("Level 8 Pain Identified \n" ); 
    display.display(); //Registeration text displayed on LCD
    delay(4000);
    display.clearDisplay(); //clear buffer
    display.display(); //display cleared screen
    
     
  } else if (current_pain < level_ten_pain ) {
    display.setCursor(0,0);   
    display.println("Level 9 Pain Identified \n" ); 
    display.display(); //Registeration text displayed on LCD
    delay(4000);
    display.clearDisplay(); //clear buffer
    display.display(); //display cleared screen
    
    
    
  } else {
    display.println("Level 10 Pain Identified ");
  }


 }
 
}
